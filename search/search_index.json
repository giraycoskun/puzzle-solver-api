{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Puzzle Solver API","text":"<p>Docs: https://giraycoskun.github.io/puzzle-solver-api/</p>"},{"location":"#architecture","title":"Architecture","text":""},{"location":"#docker","title":"Docker","text":"<p>DockerHub: https://hub.docker.com/repository/docker/giraycoskun/puzzle-solver</p> <pre><code>docker build -t puzzle-solver-api .\ndocker run -p 80:80 puzzle-solver-api\n</code></pre> <pre><code>docker pull giraycoskun/puzzle-solver:latest\n</code></pre>"},{"location":"#local-development","title":"Local Development","text":"<pre><code>git clone &lt;&gt;\n</code></pre> <pre><code>poetry install\n</code></pre> <pre><code>poetry export -f requirements.txt --output requirements.txt --with dev,docs\n</code></pre> <pre><code>poetry shell\n</code></pre> <pre><code>mkdocs serve\n</code></pre> <pre><code>uvicorn src.main:app --reload --reload-dir src  --port 8000\n</code></pre>"},{"location":"#services-rabbitmq-redis","title":"Services: RabbitMQ &amp; Redis","text":"<pre><code>docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.11.13-management\n</code></pre> <pre><code>docker run -it --rm --name redis -p 6379:6379  redis:latest\n</code></pre>"},{"location":"#tasks","title":"Tasks","text":"<ul> <li>[x] Create a REST API with FastAPI</li> <li>[ ] Apply Async in RabbitMQ Repository</li> <li>[ ] Initialize Subscription Service</li> <li>[ ] Initialize redis connection for solver service</li> </ul>"},{"location":"#package-references","title":"Package References","text":"<ul> <li>https://fastapi.tiangolo.com/</li> <li>https://docs.python.org/3/library/typing.html</li> <li>https://docs.pydantic.dev/</li> <li>https://pika.readthedocs.io/en/stable/index.html</li> <li>https://redis.readthedocs.io/en/stable/index.html</li> </ul>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#routes","title":"Routes","text":""},{"location":"architecture/#subscription-service","title":"Subscription Service","text":""},{"location":"architecture/#puzzle-solver-service","title":"Puzzle Solver Service","text":""},{"location":"architecture/#rabbitmq","title":"RabbitMQ","text":""},{"location":"architecture/#redis","title":"Redis","text":""},{"location":"search/","title":"Search Based Solutions","text":""},{"location":"search/#aima4e","title":"AIMA4e","text":"<p>function UNIFORM-COST-SEARCH(problem) returns a solution, or failure if problem's initial state is a goal then return empty path to initial state frontier \u2190 a priority queue ordered by pathCost, with a node for the initial state reached \u2190 a table of {state: the best path that reached state}; initially empty solution \u2190 failure while frontier is not empty and top(frontier) is cheaper than solution do parent \u2190 pop(frontier) for child in successors(parent) do s \u2190 child.state if s is not in reached or child is a cheaper path than reached[s] then reached[s] \u2190 child \u2003\u2003\u2003\u2003\u2003\u2003\u2003add child to the frontier if child is a goal and is cheaper than solution then solution  =  child return solution</p> <p>Figure 3.11 Uniform-cost search on a graph. Finds optimal paths for problems with varying step costs. From http://aima.cs.berkeley.edu/global-index.html</p>"},{"location":"search/#solver.search.ucs.UniformCostSearch","title":"<code>solver.search.ucs.UniformCostSearch</code>","text":"<p>Uniform-Cost Search </p> <p>Uniform-Cost Search is a graph search algorithm</p> Source code in <code>src/solver/search/ucs.py</code> <pre><code>class UniformCostSearch:\n\"\"\"Uniform-Cost Search \n\n    Uniform-Cost Search is a graph search algorithm\n\n    \"\"\"    \n\n    def __init__(self, problem: SearchProblem):\n\"\"\"initialize Uniform-Cost Search\n\n        Args:\n            problem (SearchProblem): _description_\n        \"\"\"        \n        self.problem = problem\n        logger.info(\"Uniform-Cost Search Initialized\")\n</code></pre>"},{"location":"search/#solver.search.ucs.UniformCostSearch.problem","title":"<code>problem = problem</code>  <code>instance-attribute</code>","text":""},{"location":"search/#solver.search.ucs.UniformCostSearch.__init__","title":"<code>__init__(problem)</code>","text":"<p>initialize Uniform-Cost Search</p> <p>Parameters:</p> Name Type Description Default <code>problem</code> <code>SearchProblem</code> <p>description</p> required Source code in <code>src/solver/search/ucs.py</code> <pre><code>def __init__(self, problem: SearchProblem):\n\"\"\"initialize Uniform-Cost Search\n\n    Args:\n        problem (SearchProblem): _description_\n    \"\"\"        \n    self.problem = problem\n    logger.info(\"Uniform-Cost Search Initialized\")\n</code></pre>"},{"location":"setup/","title":"Setup","text":""},{"location":"setup/#via-docker","title":"via Docker","text":""},{"location":"setup/#local-installation","title":"Local Installation","text":""},{"location":"setup/#notes","title":"Notes","text":""},{"location":"reference/api/","title":"API Reference","text":""},{"location":"reference/api/#routes","title":"Routes","text":""},{"location":"reference/api/#status","title":"Status","text":""},{"location":"reference/api/#api.routes.status.get_status","title":"<code>api.routes.status.get_status(id)</code>  <code>async</code>","text":"<p>Get status of a puzzle.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>puzzel id</p> required <p>Returns:</p> Name Type Description <code>Status</code> <code>Status</code> <p>status of the puzzle</p> Source code in <code>src/api/routes/status.py</code> <pre><code>@router.get(\"/{id}\")\nasync def get_status(id: int) -&gt; Status:\n\"\"\"Get status of a puzzle.\n\n    Args:\n        id (int): puzzel id\n\n    Returns:\n        Status: status of the puzzle\n    \"\"\"    \n    return  Status(id=id, status=\"OK\")\n</code></pre>"},{"location":"reference/api/#service","title":"Service","text":""},{"location":"reference/api/#repository","title":"Repository","text":""},{"location":"reference/api/#api.repository.rabbitmq_repository.RabbitMQRepository","title":"<code>api.repository.rabbitmq_repository.RabbitMQRepository</code>","text":"Source code in <code>src/api/repository/rabbitmq_repository.py</code> <pre><code>class RabbitMQRepository:\n\n\n    def __init__(self) -&gt; None:\n        parameters = pika.ConnectionParameters(\n            host=RABBITMQ_HOST,\n            port=RABBITMQ_PORT,\n            credentials=pika.PlainCredentials(RABBITMQ_USER, RABBITMQ_PASSWORD)\n        )\n\n        connection = pika.BlockingConnection(parameters)\n        channel = connection.channel()\n        channel.queue_declare(queue=RABBITMQ_PUZZLE_QUEUE_NAME, durable=True)\n        channel.queue_declare(queue=RABBITMQ_RESULT_QUEUE_NAME, durable=True)\n        connection.close()\n\n        self.connections = Queue()\n        for _ in range(int(RABBITMQ_POOL_SIZE)):\n            self.connections.put(pika.BlockingConnection(parameters))\n\n    def __get_connection(self) -&gt; pika.BlockingConnection:\n\"\"\"Get a connection from the pool.\n\n        Returns:\n            pika.BlockingConnection: A blocking connection object\n        \"\"\"               \n        return self.connections.get()\n\n    def __release_connection(self, connection: pika.BlockingConnection) -&gt; None:\n\"\"\"Release a connection to the pool.\n\n        Args:\n            connection (pika.BlockingConnection): A blocking connection object\n        \"\"\"        \n        self.connections.put(connection)\n\n    def publish_puzzle(self, puzzle):\n        connection = self.__get_connection()\n        channel = connection.channel()\n        channel.basic_publish(exchange='', routing_key=RABBITMQ_PUZZLE_QUEUE_NAME, body='test')\n        self.__release_connection(connection)\n\n    def consume_puzzle(self, callback):\n        connection = self.__get_connection()\n        channel = connection.channel()\n        channel.queue_declare(queue=RABBITMQ_RESULT_QUEUE_NAME)\n        channel.basic_consume(queue=RABBITMQ_RESULT_QUEUE_NAME, on_message_callback=callback, auto_ack=True)\n        channel.start_consuming()\n        self.__release_connection(connection)\n\n    def close(self):\n        while not self.connections.empty():\n            self.connections.get().close()\n</code></pre>"},{"location":"reference/api/#api.repository.rabbitmq_repository.RabbitMQRepository.connections","title":"<code>connections = Queue()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/api/#api.repository.rabbitmq_repository.RabbitMQRepository.__get_connection","title":"<code>__get_connection()</code>","text":"<p>Get a connection from the pool.</p> <p>Returns:</p> Type Description <code>pika.BlockingConnection</code> <p>pika.BlockingConnection: A blocking connection object</p> Source code in <code>src/api/repository/rabbitmq_repository.py</code> <pre><code>def __get_connection(self) -&gt; pika.BlockingConnection:\n\"\"\"Get a connection from the pool.\n\n    Returns:\n        pika.BlockingConnection: A blocking connection object\n    \"\"\"               \n    return self.connections.get()\n</code></pre>"},{"location":"reference/api/#api.repository.rabbitmq_repository.RabbitMQRepository.__init__","title":"<code>__init__()</code>","text":"Source code in <code>src/api/repository/rabbitmq_repository.py</code> <pre><code>def __init__(self) -&gt; None:\n    parameters = pika.ConnectionParameters(\n        host=RABBITMQ_HOST,\n        port=RABBITMQ_PORT,\n        credentials=pika.PlainCredentials(RABBITMQ_USER, RABBITMQ_PASSWORD)\n    )\n\n    connection = pika.BlockingConnection(parameters)\n    channel = connection.channel()\n    channel.queue_declare(queue=RABBITMQ_PUZZLE_QUEUE_NAME, durable=True)\n    channel.queue_declare(queue=RABBITMQ_RESULT_QUEUE_NAME, durable=True)\n    connection.close()\n\n    self.connections = Queue()\n    for _ in range(int(RABBITMQ_POOL_SIZE)):\n        self.connections.put(pika.BlockingConnection(parameters))\n</code></pre>"},{"location":"reference/api/#api.repository.rabbitmq_repository.RabbitMQRepository.__release_connection","title":"<code>__release_connection(connection)</code>","text":"<p>Release a connection to the pool.</p> <p>Parameters:</p> Name Type Description Default <code>connection</code> <code>pika.BlockingConnection</code> <p>A blocking connection object</p> required Source code in <code>src/api/repository/rabbitmq_repository.py</code> <pre><code>def __release_connection(self, connection: pika.BlockingConnection) -&gt; None:\n\"\"\"Release a connection to the pool.\n\n    Args:\n        connection (pika.BlockingConnection): A blocking connection object\n    \"\"\"        \n    self.connections.put(connection)\n</code></pre>"},{"location":"reference/api/#api.repository.rabbitmq_repository.RabbitMQRepository.close","title":"<code>close()</code>","text":"Source code in <code>src/api/repository/rabbitmq_repository.py</code> <pre><code>def close(self):\n    while not self.connections.empty():\n        self.connections.get().close()\n</code></pre>"},{"location":"reference/api/#api.repository.rabbitmq_repository.RabbitMQRepository.consume_puzzle","title":"<code>consume_puzzle(callback)</code>","text":"Source code in <code>src/api/repository/rabbitmq_repository.py</code> <pre><code>def consume_puzzle(self, callback):\n    connection = self.__get_connection()\n    channel = connection.channel()\n    channel.queue_declare(queue=RABBITMQ_RESULT_QUEUE_NAME)\n    channel.basic_consume(queue=RABBITMQ_RESULT_QUEUE_NAME, on_message_callback=callback, auto_ack=True)\n    channel.start_consuming()\n    self.__release_connection(connection)\n</code></pre>"},{"location":"reference/api/#api.repository.rabbitmq_repository.RabbitMQRepository.publish_puzzle","title":"<code>publish_puzzle(puzzle)</code>","text":"Source code in <code>src/api/repository/rabbitmq_repository.py</code> <pre><code>def publish_puzzle(self, puzzle):\n    connection = self.__get_connection()\n    channel = connection.channel()\n    channel.basic_publish(exchange='', routing_key=RABBITMQ_PUZZLE_QUEUE_NAME, body='test')\n    self.__release_connection(connection)\n</code></pre>"},{"location":"reference/reference/","title":"Reference","text":"<ul> <li>REST API</li> <li>Solver</li> <li>Subscription</li> </ul>"},{"location":"reference/solver/","title":"Solver Service","text":""},{"location":"reference/subscription/","title":"Subscription Service","text":""}]}